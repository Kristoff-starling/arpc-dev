// Code generated by protoc-gen-symphony. DO NOT EDIT.
package kv

import (
	"bytes"
	"encoding/binary"
)

func (m *GetRequest) MarshalSymphony() ([]byte, error) {
	var buf bytes.Buffer

	// === HEADER SECTION ===
	buf.WriteByte(0x00) // layout header
	buf.Write([]byte{1})

	// === OFFSET TABLE SECTION ===
	offset := 0

	// Field 1 (Key): string or bytes
	binary.Write(&buf, binary.LittleEndian, byte(1))
	binary.Write(&buf, binary.LittleEndian, uint16(offset)) // offset of Key
	binary.Write(&buf, binary.LittleEndian, uint16(len(m.Key)))
	offset += len(m.Key)

	// === DATA REGION SECTION ===

	// Write string or bytes field (Key)
	buf.Write([]byte(m.Key))

	return buf.Bytes(), nil
}

func (m *GetRequest) UnmarshalSymphony(data []byte) error {
	// === HEADER PARSING SECTION ===
	reader := bytes.NewReader(data)
	var header byte
	if err := binary.Read(reader, binary.LittleEndian, &header); err != nil {
		return err
	}

	fieldOrder := make([]byte, 1)
	if _, err := reader.Read(fieldOrder); err != nil {
		return err
	}

	// === OFFSET TABLE PARSING SECTION ===
	type offsetEntry struct{ offset, length uint16 }
	offsets := map[byte]offsetEntry{}
	for i := 0; i < 1; i++ {
		var fieldID byte
		var off, len uint16
		if err := binary.Read(reader, binary.LittleEndian, &fieldID); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &off); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &len); err != nil {
			return err
		}
		offsets[fieldID] = offsetEntry{off, len}
	}

	// === DATA REGION EXTRACTION SECTION ===
	dataRegion := data[len(data)-reader.Len():]
	offset := 0

	// === FIELD UNMARSHALING SECTION ===
	for _, fieldNum := range fieldOrder {
		switch fieldNum {
		case 1: // Key
			// Unmarshal string or []byte field (Key)
			if entry, ok := offsets[1]; ok {
				m.Key = string(dataRegion[entry.offset : entry.offset+entry.length])
				offset += int(entry.length)
			}
		}
	}

	return nil
}

func (m *GetResponse) MarshalSymphony() ([]byte, error) {
	var buf bytes.Buffer

	// === HEADER SECTION ===
	buf.WriteByte(0x00) // layout header
	buf.Write([]byte{1})

	// === OFFSET TABLE SECTION ===
	offset := 0

	// Field 1 (Value): string or bytes
	binary.Write(&buf, binary.LittleEndian, byte(1))
	binary.Write(&buf, binary.LittleEndian, uint16(offset)) // offset of Value
	binary.Write(&buf, binary.LittleEndian, uint16(len(m.Value)))
	offset += len(m.Value)

	// === DATA REGION SECTION ===

	// Write string or bytes field (Value)
	buf.Write([]byte(m.Value))

	return buf.Bytes(), nil
}

func (m *GetResponse) UnmarshalSymphony(data []byte) error {
	// === HEADER PARSING SECTION ===
	reader := bytes.NewReader(data)
	var header byte
	if err := binary.Read(reader, binary.LittleEndian, &header); err != nil {
		return err
	}

	fieldOrder := make([]byte, 1)
	if _, err := reader.Read(fieldOrder); err != nil {
		return err
	}

	// === OFFSET TABLE PARSING SECTION ===
	type offsetEntry struct{ offset, length uint16 }
	offsets := map[byte]offsetEntry{}
	for i := 0; i < 1; i++ {
		var fieldID byte
		var off, len uint16
		if err := binary.Read(reader, binary.LittleEndian, &fieldID); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &off); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &len); err != nil {
			return err
		}
		offsets[fieldID] = offsetEntry{off, len}
	}

	// === DATA REGION EXTRACTION SECTION ===
	dataRegion := data[len(data)-reader.Len():]
	offset := 0

	// === FIELD UNMARSHALING SECTION ===
	for _, fieldNum := range fieldOrder {
		switch fieldNum {
		case 1: // Value
			// Unmarshal string or []byte field (Value)
			if entry, ok := offsets[1]; ok {
				m.Value = string(dataRegion[entry.offset : entry.offset+entry.length])
				offset += int(entry.length)
			}
		}
	}

	return nil
}

func (m *SetRequest) MarshalSymphony() ([]byte, error) {
	var buf bytes.Buffer

	// === HEADER SECTION ===
	buf.WriteByte(0x00) // layout header
	buf.Write([]byte{1, 2})

	// === OFFSET TABLE SECTION ===
	offset := 0

	// Field 1 (Key): string or bytes
	binary.Write(&buf, binary.LittleEndian, byte(1))
	binary.Write(&buf, binary.LittleEndian, uint16(offset)) // offset of Key
	binary.Write(&buf, binary.LittleEndian, uint16(len(m.Key)))
	offset += len(m.Key)

	// Field 2 (Value): string or bytes
	binary.Write(&buf, binary.LittleEndian, byte(2))
	binary.Write(&buf, binary.LittleEndian, uint16(offset)) // offset of Value
	binary.Write(&buf, binary.LittleEndian, uint16(len(m.Value)))
	offset += len(m.Value)

	// === DATA REGION SECTION ===

	// Write string or bytes field (Key)
	buf.Write([]byte(m.Key))

	// Write string or bytes field (Value)
	buf.Write([]byte(m.Value))

	return buf.Bytes(), nil
}

func (m *SetRequest) UnmarshalSymphony(data []byte) error {
	// === HEADER PARSING SECTION ===
	reader := bytes.NewReader(data)
	var header byte
	if err := binary.Read(reader, binary.LittleEndian, &header); err != nil {
		return err
	}

	fieldOrder := make([]byte, 2)
	if _, err := reader.Read(fieldOrder); err != nil {
		return err
	}

	// === OFFSET TABLE PARSING SECTION ===
	type offsetEntry struct{ offset, length uint16 }
	offsets := map[byte]offsetEntry{}
	for i := 0; i < 2; i++ {
		var fieldID byte
		var off, len uint16
		if err := binary.Read(reader, binary.LittleEndian, &fieldID); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &off); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &len); err != nil {
			return err
		}
		offsets[fieldID] = offsetEntry{off, len}
	}

	// === DATA REGION EXTRACTION SECTION ===
	dataRegion := data[len(data)-reader.Len():]
	offset := 0

	// === FIELD UNMARSHALING SECTION ===
	for _, fieldNum := range fieldOrder {
		switch fieldNum {
		case 1: // Key
			// Unmarshal string or []byte field (Key)
			if entry, ok := offsets[1]; ok {
				m.Key = string(dataRegion[entry.offset : entry.offset+entry.length])
				offset += int(entry.length)
			}
		case 2: // Value
			// Unmarshal string or []byte field (Value)
			if entry, ok := offsets[2]; ok {
				m.Value = string(dataRegion[entry.offset : entry.offset+entry.length])
				offset += int(entry.length)
			}
		}
	}

	return nil
}

func (m *SetResponse) MarshalSymphony() ([]byte, error) {
	var buf bytes.Buffer

	// === HEADER SECTION ===
	buf.WriteByte(0x00) // layout header
	buf.Write([]byte{1})

	// === OFFSET TABLE SECTION ===
	offset := 0

	// Field 1 (Value): string or bytes
	binary.Write(&buf, binary.LittleEndian, byte(1))
	binary.Write(&buf, binary.LittleEndian, uint16(offset)) // offset of Value
	binary.Write(&buf, binary.LittleEndian, uint16(len(m.Value)))
	offset += len(m.Value)

	// === DATA REGION SECTION ===

	// Write string or bytes field (Value)
	buf.Write([]byte(m.Value))

	return buf.Bytes(), nil
}

func (m *SetResponse) UnmarshalSymphony(data []byte) error {
	// === HEADER PARSING SECTION ===
	reader := bytes.NewReader(data)
	var header byte
	if err := binary.Read(reader, binary.LittleEndian, &header); err != nil {
		return err
	}

	fieldOrder := make([]byte, 1)
	if _, err := reader.Read(fieldOrder); err != nil {
		return err
	}

	// === OFFSET TABLE PARSING SECTION ===
	type offsetEntry struct{ offset, length uint16 }
	offsets := map[byte]offsetEntry{}
	for i := 0; i < 1; i++ {
		var fieldID byte
		var off, len uint16
		if err := binary.Read(reader, binary.LittleEndian, &fieldID); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &off); err != nil {
			return err
		}
		if err := binary.Read(reader, binary.LittleEndian, &len); err != nil {
			return err
		}
		offsets[fieldID] = offsetEntry{off, len}
	}

	// === DATA REGION EXTRACTION SECTION ===
	dataRegion := data[len(data)-reader.Len():]
	offset := 0

	// === FIELD UNMARSHALING SECTION ===
	for _, fieldNum := range fieldOrder {
		switch fieldNum {
		case 1: // Value
			// Unmarshal string or []byte field (Value)
			if entry, ok := offsets[1]; ok {
				m.Value = string(dataRegion[entry.offset : entry.offset+entry.length])
				offset += int(entry.length)
			}
		}
	}

	return nil
}
