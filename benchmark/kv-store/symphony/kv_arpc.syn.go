// Code generated by protoc-gen-arpc. DO NOT EDIT.
package kv

import (
	"context"
	"github.com/appnet-org/arpc/pkg/rpc"
)

// KVServiceClient is the client API for KVService service.
type KVServiceClient interface {
	Get(ctx context.Context, req *GetRequest) (*GetResponse, error)
	Set(ctx context.Context, req *SetRequest) (*SetResponse, error)
}

type arpcKVServiceClient struct {
	client *rpc.Client
}

func NewKVServiceClient(client *rpc.Client) KVServiceClient {
	return &arpcKVServiceClient{client: client}
}

func (c *arpcKVServiceClient) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	resp := new(GetResponse)
	if err := c.client.Call(ctx, "KVService", "Get", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcKVServiceClient) Set(ctx context.Context, req *SetRequest) (*SetResponse, error) {
	resp := new(SetResponse)
	if err := c.client.Call(ctx, "KVService", "Set", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type KVServiceServer interface {
	Get(ctx context.Context, req *GetRequest) (*GetResponse, context.Context, error)
	Set(ctx context.Context, req *SetRequest) (*SetResponse, context.Context, error)
}

func RegisterKVServiceServer(s *rpc.Server, srv KVServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "KVService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"Get": {
				MethodName: "Get",
				Handler:    _KVService_Get_Handler,
			},
			"Set": {
				MethodName: "Set",
				Handler:    _KVService_Set_Handler,
			},
		},
	}, srv)
}
func _KVService_Get_Handler(srv any, ctx context.Context, dec func(any) error) (any, context.Context, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, ctx, err
	}
	out, newCtx, err := srv.(KVServiceServer).Get(ctx, in)
	return out, newCtx, err
}
func _KVService_Set_Handler(srv any, ctx context.Context, dec func(any) error) (any, context.Context, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, ctx, err
	}
	out, newCtx, err := srv.(KVServiceServer).Set(ctx, in)
	return out, newCtx, err
}
