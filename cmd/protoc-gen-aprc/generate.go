package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func generateFile(plugin *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_aprc.pb.go"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-aprc. DO NOT EDIT.")
	g.P("package ", file.GoPackageName)
	g.P()
	g.P(`import (`)
	g.P(`  "context"`)
	g.P(`  "github.com/appnet-org/aprc/internal/codec"`)
	g.P(`  "github.com/appnet-org/aprc/pkg/rpc"`)
	g.P(`)`)
	g.P()

	for _, service := range file.Services {
		genService(g, service)
	}
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	svcName := service.GoName
	clientName := svcName + "Client"

	// Client interface
	g.P("// ", clientName, " is the client API for ", svcName, " service.")
	g.P("type ", clientName, " interface {")
	for _, m := range service.Methods {
		g.P(m.GoName, "(ctx context.Context, req *", m.Input.GoIdent, ") (*", m.Output.GoIdent, ", error)")
	}
	g.P("}")
	g.P()

	// Client implementation
	implName := "aprc" + clientName
	g.P("type ", implName, " struct {")
	g.P("  client *rpc.Client")
	g.P("}")
	g.P()

	// NewClient constructor
	g.P("func New", clientName, "(client *rpc.Client) ", clientName, " {")
	g.P("  return &", implName, "{client: client}")
	g.P("}")
	g.P()

	for _, m := range service.Methods {
		g.P("func (c *", implName, ") ", m.GoName,
			"(ctx context.Context, req *", m.Input.GoIdent, ") (*", m.Output.GoIdent, ", error) {")
		g.P("  var resp ", m.Output.GoIdent)
		g.P("  if err := c.client.Call(\"", strings.ToLower(m.GoName), "\", req, &resp); err != nil {")
		g.P("    return nil, err")
		g.P("  }")
		g.P("  return &resp, nil")
		g.P("}")
		g.P()
	}

	// Server registration
	g.P("type ", svcName, "Server interface {")
	for _, m := range service.Methods {
		g.P(m.GoName, "(ctx context.Context, req *", m.Input.GoIdent, ") (*", m.Output.GoIdent, ", error)")
	}
	g.P("}")
	g.P()

	// Register function
	g.P("func Register", svcName, "Server(r *rpc.Server, impl ", svcName, "Server) {")
	for _, m := range service.Methods {
		g.P(`  r.Register("`, m, `", func(req any) any {`)
		g.P(`    res, _ := impl.`, m.GoName, `(context.Background(), req.(*`, m.Input.GoIdent, `))`)
		g.P(`    return res`)
		g.P(`  })`)

	}
	g.P("}")
}
