// Code generated by protoc-gen-aprc. DO NOT EDIT.
package pb

import (
	"context"
	"github.com/appnet-org/aprc/internal/serializer"
	"github.com/appnet-org/aprc/pkg/rpc"
)

// EchoServiceClient is the client API for EchoService service.
type EchoServiceClient interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error)
}

type aprcEchoServiceClient struct {
	client *rpc.Client
}

func NewEchoServiceClient(client *rpc.Client) EchoServiceClient {
	return &aprcEchoServiceClient{client: client}
}

func (c *aprcEchoServiceClient) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	resp := new(EchoResponse)
	if err := c.client.Call("EchoService/Echo", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type EchoServiceServer interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error)
}

func RegisterEchoServiceServer(s *rpc.Server, srv EchoServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "EchoService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"Echo": {
				MethodName: "Echo",
				Handler:    _EchoService_Echo_Handler,
			},
		},
	})
}
func _EchoService_Echo_Handler(srv any, ctx context.Context, dec func(any) error) (any, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(EchoServiceServer).Echo(ctx, in)
}
