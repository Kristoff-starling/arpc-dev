// Code generated by protoc-gen-aprc. DO NOT EDIT.
package pb

import (
	"context"
	"github.com/appnet-org/aprc/internal/codec"
	"github.com/appnet-org/aprc/pkg/rpc"
)

// EchoServiceClient is the client API for EchoService service.
type EchoServiceClient interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoRequest, error)
}

type aprcEchoServiceClient struct {
	client *rpc.Client
}

func NewEchoServiceClient(client *rpc.Client) EchoServiceClient {
	return &aprcEchoServiceClient{client: client}
}

func (c *aprcEchoServiceClient) Echo(ctx context.Context, req *EchoRequest) (*EchoRequest, error) {
	var resp EchoRequest
	if err := c.client.Call("echo", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

type EchoServiceServer interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoRequest, error)
}

func RegisterEchoServiceServer(r *rpc.Server, impl EchoServiceServer) {
	r.Register("&{MethodDescriptor{Syntax: proto3, FullName: pb.EchoService.echo, Input: pb.EchoRequest, Output: pb.EchoRequest} Echo 0xc00019b7c0 0xc0001bd8c0 0xc0001bd8c0 {examples/echo/proto/echo.proto .service[0].method[0]} {[]  }}", func(req any) any {
		res, _ := impl.Echo(context.Background(), req.(*EchoRequest))
		return res
	})
}
