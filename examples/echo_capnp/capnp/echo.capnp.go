// Code generated by capnpc-go. DO NOT EDIT.

package echo_capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type EchoRequest capnp.Struct

// EchoRequest_TypeID is the unique identifier for the type EchoRequest.
const EchoRequest_TypeID = 0xc1220377c3a1b7a0

func NewEchoRequest(s *capnp.Segment) (EchoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoRequest(st), err
}

func NewRootEchoRequest(s *capnp.Segment) (EchoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoRequest(st), err
}

func ReadRootEchoRequest(msg *capnp.Message) (EchoRequest, error) {
	root, err := msg.Root()
	return EchoRequest(root.Struct()), err
}

func (s EchoRequest) String() string {
	str, _ := text.Marshal(0xc1220377c3a1b7a0, capnp.Struct(s))
	return str
}

func (s EchoRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoRequest) DecodeFromPtr(p capnp.Ptr) EchoRequest {
	return EchoRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoRequest) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoRequest) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoRequest) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoRequest) SetContent(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoRequest_List is a list of EchoRequest.
type EchoRequest_List = capnp.StructList[EchoRequest]

// NewEchoRequest creates a new list of EchoRequest.
func NewEchoRequest_List(s *capnp.Segment, sz int32) (EchoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoRequest](l), err
}

// EchoRequest_Future is a wrapper for a EchoRequest promised by a client call.
type EchoRequest_Future struct{ *capnp.Future }

func (f EchoRequest_Future) Struct() (EchoRequest, error) {
	p, err := f.Future.Ptr()
	return EchoRequest(p.Struct()), err
}

type EchoResponse capnp.Struct

// EchoResponse_TypeID is the unique identifier for the type EchoResponse.
const EchoResponse_TypeID = 0xb798c2c3642ab860

func NewEchoResponse(s *capnp.Segment) (EchoResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoResponse(st), err
}

func NewRootEchoResponse(s *capnp.Segment) (EchoResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoResponse(st), err
}

func ReadRootEchoResponse(msg *capnp.Message) (EchoResponse, error) {
	root, err := msg.Root()
	return EchoResponse(root.Struct()), err
}

func (s EchoResponse) String() string {
	str, _ := text.Marshal(0xb798c2c3642ab860, capnp.Struct(s))
	return str
}

func (s EchoResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoResponse) DecodeFromPtr(p capnp.Ptr) EchoResponse {
	return EchoResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoResponse) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoResponse) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoResponse) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoResponse) SetContent(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoResponse_List is a list of EchoResponse.
type EchoResponse_List = capnp.StructList[EchoResponse]

// NewEchoResponse creates a new list of EchoResponse.
func NewEchoResponse_List(s *capnp.Segment, sz int32) (EchoResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoResponse](l), err
}

// EchoResponse_Future is a wrapper for a EchoResponse promised by a client call.
type EchoResponse_Future struct{ *capnp.Future }

func (f EchoResponse_Future) Struct() (EchoResponse, error) {
	p, err := f.Future.Ptr()
	return EchoResponse(p.Struct()), err
}

type EchoService capnp.Client

// EchoService_TypeID is the unique identifier for the type EchoService.
const EchoService_TypeID = 0xe8f0ccf9e3e40d00

func (c EchoService) Echo(ctx context.Context, params func(EchoService_echo_Params) error) (EchoService_echo_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8f0ccf9e3e40d00,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "echo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_echo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_echo_Results_Future{Future: ans.Future()}, release

}

func (c EchoService) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c EchoService) String() string {
	return "EchoService(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c EchoService) AddRef() EchoService {
	return EchoService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c EchoService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c EchoService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c EchoService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EchoService) DecodeFromPtr(p capnp.Ptr) EchoService {
	return EchoService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c EchoService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c EchoService) IsSame(other EchoService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c EchoService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c EchoService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A EchoService_Server is a EchoService with a local implementation.
type EchoService_Server interface {
	Echo(context.Context, EchoService_echo) error
}

// EchoService_NewServer creates a new Server from an implementation of EchoService_Server.
func EchoService_NewServer(s EchoService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EchoService_Methods(nil, s), s, c)
}

// EchoService_ServerToClient creates a new Client from an implementation of EchoService_Server.
// The caller is responsible for calling Release on the returned Client.
func EchoService_ServerToClient(s EchoService_Server) EchoService {
	return EchoService(capnp.NewClient(EchoService_NewServer(s)))
}

// EchoService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EchoService_Methods(methods []server.Method, s EchoService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8f0ccf9e3e40d00,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "echo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Echo(ctx, EchoService_echo{call})
		},
	})

	return methods
}

// EchoService_echo holds the state for a server call to EchoService.echo.
// See server.Call for documentation.
type EchoService_echo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_echo) Args() EchoService_echo_Params {
	return EchoService_echo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_echo) AllocResults() (EchoService_echo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(r), err
}

// EchoService_List is a list of EchoService.
type EchoService_List = capnp.CapList[EchoService]

// NewEchoService_List creates a new list of EchoService.
func NewEchoService_List(s *capnp.Segment, sz int32) (EchoService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EchoService](l), err
}

type EchoService_echo_Params capnp.Struct

// EchoService_echo_Params_TypeID is the unique identifier for the type EchoService_echo_Params.
const EchoService_echo_Params_TypeID = 0xd852f6756d123ece

func NewEchoService_echo_Params(s *capnp.Segment) (EchoService_echo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Params(st), err
}

func NewRootEchoService_echo_Params(s *capnp.Segment) (EchoService_echo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Params(st), err
}

func ReadRootEchoService_echo_Params(msg *capnp.Message) (EchoService_echo_Params, error) {
	root, err := msg.Root()
	return EchoService_echo_Params(root.Struct()), err
}

func (s EchoService_echo_Params) String() string {
	str, _ := text.Marshal(0xd852f6756d123ece, capnp.Struct(s))
	return str
}

func (s EchoService_echo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_echo_Params) DecodeFromPtr(p capnp.Ptr) EchoService_echo_Params {
	return EchoService_echo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_echo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_echo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_echo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_echo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_echo_Params) Req() (EchoRequest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EchoRequest(p.Struct()), err
}

func (s EchoService_echo_Params) HasReq() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_echo_Params) SetReq(v EchoRequest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewReq sets the req field to a newly
// allocated EchoRequest struct, preferring placement in s's segment.
func (s EchoService_echo_Params) NewReq() (EchoRequest, error) {
	ss, err := NewEchoRequest(capnp.Struct(s).Segment())
	if err != nil {
		return EchoRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EchoService_echo_Params_List is a list of EchoService_echo_Params.
type EchoService_echo_Params_List = capnp.StructList[EchoService_echo_Params]

// NewEchoService_echo_Params creates a new list of EchoService_echo_Params.
func NewEchoService_echo_Params_List(s *capnp.Segment, sz int32) (EchoService_echo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_echo_Params](l), err
}

// EchoService_echo_Params_Future is a wrapper for a EchoService_echo_Params promised by a client call.
type EchoService_echo_Params_Future struct{ *capnp.Future }

func (f EchoService_echo_Params_Future) Struct() (EchoService_echo_Params, error) {
	p, err := f.Future.Ptr()
	return EchoService_echo_Params(p.Struct()), err
}
func (p EchoService_echo_Params_Future) Req() EchoRequest_Future {
	return EchoRequest_Future{Future: p.Future.Field(0, nil)}
}

type EchoService_echo_Results capnp.Struct

// EchoService_echo_Results_TypeID is the unique identifier for the type EchoService_echo_Results.
const EchoService_echo_Results_TypeID = 0xf47bc8e9b85ec174

func NewEchoService_echo_Results(s *capnp.Segment) (EchoService_echo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(st), err
}

func NewRootEchoService_echo_Results(s *capnp.Segment) (EchoService_echo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(st), err
}

func ReadRootEchoService_echo_Results(msg *capnp.Message) (EchoService_echo_Results, error) {
	root, err := msg.Root()
	return EchoService_echo_Results(root.Struct()), err
}

func (s EchoService_echo_Results) String() string {
	str, _ := text.Marshal(0xf47bc8e9b85ec174, capnp.Struct(s))
	return str
}

func (s EchoService_echo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_echo_Results) DecodeFromPtr(p capnp.Ptr) EchoService_echo_Results {
	return EchoService_echo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_echo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_echo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_echo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_echo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_echo_Results) Resp() (EchoResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EchoResponse(p.Struct()), err
}

func (s EchoService_echo_Results) HasResp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_echo_Results) SetResp(v EchoResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResp sets the resp field to a newly
// allocated EchoResponse struct, preferring placement in s's segment.
func (s EchoService_echo_Results) NewResp() (EchoResponse, error) {
	ss, err := NewEchoResponse(capnp.Struct(s).Segment())
	if err != nil {
		return EchoResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EchoService_echo_Results_List is a list of EchoService_echo_Results.
type EchoService_echo_Results_List = capnp.StructList[EchoService_echo_Results]

// NewEchoService_echo_Results creates a new list of EchoService_echo_Results.
func NewEchoService_echo_Results_List(s *capnp.Segment, sz int32) (EchoService_echo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_echo_Results](l), err
}

// EchoService_echo_Results_Future is a wrapper for a EchoService_echo_Results promised by a client call.
type EchoService_echo_Results_Future struct{ *capnp.Future }

func (f EchoService_echo_Results_Future) Struct() (EchoService_echo_Results, error) {
	p, err := f.Future.Ptr()
	return EchoService_echo_Results(p.Struct()), err
}
func (p EchoService_echo_Results_Future) Resp() EchoResponse_Future {
	return EchoResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_bf5147bb3b06fa3d = "x\xda\x128\xed\xc0b\xc8+\xcf\xcc\xc0\x14\xa8\xc2\xca" +
	"\xf6?a\x87V\xca\xe1C3\xb63\x08r3\xfe\xb7" +
	"\xfd\xc5f\xbd\xdb=p?\x03+#;\x03\x83p)" +
	"\xe3!\xe1Z0\xab\x92\xd1\x9e\x81\xf1\xff\x82\xed\x0b\x0f" +
	"\x973+\x1d\xc4\xa6v&\xe3.\xe1\x85`\xd6\\\xb0" +
	"\xdasvB\xb9\xa5\xdf\x82n0\x08\x8a32@\xd4" +
	"\x18\xefe\x94bd`\x14>\x0aR\xf0\x8f\xf7\xc9\xe3" +
	"\x9fg>\xbc\x10\xe4fF\x18\xc5\xc0(\xfc\x94q\x97" +
	"\xf0[\xb09/\x19\xdd\x85\x05\x99\xd8\x19\x18\xfe\x97\x1c" +
	"\x8c\xdb\xf1\xf2D\xf5\x17d\xb3~2*\x81\xccbd" +
	"\xb2g\xd0\xfd\x9f\x9a\x9c\x91\xaf\x97\x9cX\xc0\x94W`" +
	"\xe5\x9a\x9c\x91\x1f\x94Z\\\x90\x9fW\x9c\xca\x10\xc0\xc8" +
	"\x18\xc8\xc2\xcc\xc2\xc0\xc0\xc2\xc8\xc0 \xc8\xeb\xc4\xc0\x10" +
	"\xc8\xc1\xcc\x18(\xc2\xc4X\x9f\x9c\x9fW\x92\x9aW\xc2" +
	"\xc8\xc3\xc0\xc4\xc8\xc3\xc0\x087\x83\x11f\x86}ja" +
	"ijq\x09\x19F0C\x8d\x08N-*\xcbLN" +
	"\xd5\x03\x89\xab\x04$\x16%2\xe7\x16#\x9b\xa5\x840" +
	"\x8b\xbd(\xb5\x90Q\x00\x11\xc2\x0c\x8c\x8c\x02X\x1c\x15" +
	"l\x0f1\x12\xe2(V\x06\x06x83\xc2\x02IP" +
	"P\x8b\x81I\x90\x95\x9d\x1f\xa4\xd7\x811\x80\x91\x80\xbb" +
	"\x82R\x8bK\xd9sJP\x1c\xa6\x85p\x18\x7fQj" +
	"q\x01\xa3\x00\"\x9d@\\\x06\x08\x00\x00\xff\xffb\xb7" +
	"\x9d\xde"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bf5147bb3b06fa3d,
		Nodes: []uint64{
			0xb798c2c3642ab860,
			0xc1220377c3a1b7a0,
			0xd852f6756d123ece,
			0xe8f0ccf9e3e40d00,
			0xf47bc8e9b85ec174,
		},
		Compressed: true,
	})
}
