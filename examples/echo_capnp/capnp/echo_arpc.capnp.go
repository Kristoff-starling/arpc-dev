// Code generated by capnp-gen-arpc. DO NOT EDIT.
package echo_capnp

import (
    "context"
    "capnproto.org/go/capnp/v3"
    "github.com/appnet-org/aprc/pkg/rpc"
)

type EchoRequest_ struct {
    Msg		  *capnp.Message
    CapnpStruct *EchoRequest
}

func (e *EchoRequest_) GetContent() (string, error) {
    return e.CapnpStruct.Content()
}

func CreateEchoRequest(content string) (*EchoRequest_, error) {
    msg, seg, err := capnp.NewMessage(capnp.SingleSegment(nil))
    if err != nil {
        return nil, err
    }
    capnpStruct, err := NewRootEchoRequest(seg)
    if err != nil {
        return nil, err
    }
    err = capnpStruct.SetContent(content)
    if err != nil {
        return nil, err
    }
    echoRequest := &EchoRequest_{
        Msg:         msg,
        CapnpStruct: &capnpStruct,
    }
    return echoRequest, nil
}

type EchoResponse_ struct {
    Msg		  *capnp.Message
    CapnpStruct *EchoResponse
}

func (e *EchoResponse_) GetContent() (string, error) {
    return e.CapnpStruct.Content()
}

func CreateEchoResponse(content string) (*EchoResponse_, error) {
    msg, seg, err := capnp.NewMessage(capnp.SingleSegment(nil))
    if err != nil {
        return nil, err
    }
    capnpStruct, err := NewRootEchoResponse(seg)
    if err != nil {
        return nil, err
    }
    err = capnpStruct.SetContent(content)
    if err != nil {
        return nil, err
    }
    echoResponse := &EchoResponse_{
        Msg:         msg,
        CapnpStruct: &capnpStruct,
    }
    return echoResponse, nil
}

type EchoServiceClient interface {
    Echo(ctx context.Context, req *EchoRequest_) (*EchoResponse_, error)
}

type aprcEchoServiceClient struct {
    client *rpc.Client
}

func NewEchoServiceClient(client *rpc.Client) EchoServiceClient {
    return &aprcEchoServiceClient{client: client}
}

func (c *aprcEchoServiceClient) Echo(ctx context.Context, req *EchoRequest_) (*EchoResponse_, error) {
    resp := new(EchoResponse_)
    if err := c.client.Call("EchoService", "Echo", req.Msg, &resp.Msg); err != nil {
        return nil, err
    }
    echoResponse, err := ReadRootEchoResponse(resp.Msg)
    if err != nil {
        return nil, err
    }
    resp.CapnpStruct = &echoResponse
    return resp, nil
}

type EchoServiceServer interface {
    Echo(ctx context.Context, req *EchoRequest_) (*EchoResponse_, error)
}

func RegisterEchoServiceServer(s *rpc.Server, srv EchoServiceServer) {
    s.RegisterService(&rpc.ServiceDesc{
        ServiceName: "EchoService",
        ServiceImpl: srv,
        Methods: map[string]*rpc.MethodDesc{
            "Echo": {
                MethodName: "Echo",
                Handler: _EchoService_Echo_Handler,
            },
        },
    }, srv)
}

func _EchoService_Echo_Handler(srv any, ctx context.Context, dec func(any) error) (any, error) {
    in := new(EchoRequest_)
    if err := dec(&in.Msg); err != nil {
        return nil, err
    }
    echoRequest, err := ReadRootEchoRequest(in.Msg)
    if err != nil {
        return nil, err
    }
    in.CapnpStruct = &echoRequest
    resp, err := srv.(EchoServiceServer).Echo(ctx, in)
    return resp.Msg, err
}

