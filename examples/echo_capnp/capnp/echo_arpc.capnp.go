// Code generated by capnp-gen-arpc. DO NOT EDIT.
package echo_capnp

import (
	"context"

	"capnproto.org/go/capnp/v3"
	"github.com/appnet-org/arpc/pkg/rpc"
)

type EchoRequest_ struct {
	Msg         *capnp.Message
	CapnpStruct *EchoRequest
}

func (e *EchoRequest_) GetId() (int32, error) {
	return e.CapnpStruct.Id(), nil
}

func (e *EchoRequest_) GetScore() (float32, error) {
	return e.CapnpStruct.Score(), nil
}

func (e *EchoRequest_) GetContent() (string, error) {
	return e.CapnpStruct.Content()
}

func (e *EchoRequest_) GetTag() (string, error) {
	return e.CapnpStruct.Tag()
}

func CreateEchoRequest(id int32, score float32, content string, tag string) (*EchoRequest_, error) {
	msg, seg, err := capnp.NewMessage(capnp.SingleSegment(nil))
	if err != nil {
		return nil, err
	}
	capnpStruct, err := NewRootEchoRequest(seg)
	if err != nil {
		return nil, err
	}
	err = capnpStruct.SetContent(content)
	if err != nil {
		return nil, err
	}
	err = capnpStruct.SetTag(tag)
	if err != nil {
		return nil, err
	}
	capnpStruct.SetId(id)
	if err != nil {
		return nil, err
	}
	capnpStruct.SetScore(score)
	if err != nil {
		return nil, err
	}
	echoRequest := &EchoRequest_{
		Msg:         msg,
		CapnpStruct: &capnpStruct,
	}
	return echoRequest, nil
}

type EchoResponse_ struct {
	Msg         *capnp.Message
	CapnpStruct *EchoResponse
}

func (e *EchoResponse_) GetId() (int32, error) {
	return e.CapnpStruct.Id(), nil
}

func (e *EchoResponse_) GetScore() (float32, error) {
	return e.CapnpStruct.Score(), nil
}

func (e *EchoResponse_) GetContent() (string, error) {
	return e.CapnpStruct.Content()
}

func (e *EchoResponse_) GetTag() (string, error) {
	return e.CapnpStruct.Tag()
}

func CreateEchoResponse(id int32, score float32, content string, tag string) (*EchoResponse_, error) {
	msg, seg, err := capnp.NewMessage(capnp.SingleSegment(nil))
	if err != nil {
		return nil, err
	}
	capnpStruct, err := NewRootEchoResponse(seg)
	if err != nil {
		return nil, err
	}
	capnpStruct.SetId(id)
	if err != nil {
		return nil, err
	}
	capnpStruct.SetScore(score)
	if err != nil {
		return nil, err
	}
	err = capnpStruct.SetContent(content)
	if err != nil {
		return nil, err
	}
	err = capnpStruct.SetTag(tag)
	if err != nil {
		return nil, err
	}
	echoResponse := &EchoResponse_{
		Msg:         msg,
		CapnpStruct: &capnpStruct,
	}
	return echoResponse, nil
}

type EchoServiceClient interface {
	Echo(ctx context.Context, req *EchoRequest_) (*EchoResponse_, error)
}

type arpcEchoServiceClient struct {
	client *rpc.Client
}

func NewEchoServiceClient(client *rpc.Client) EchoServiceClient {
	return &arpcEchoServiceClient{client: client}
}

func (c *arpcEchoServiceClient) Echo(ctx context.Context, req *EchoRequest_) (*EchoResponse_, error) {
	resp := new(EchoResponse_)
	if err := c.client.Call(ctx, "EchoService", "Echo", req.Msg, &resp.Msg); err != nil {
		return nil, err
	}
	echoResponse, err := ReadRootEchoResponse(resp.Msg)
	if err != nil {
		return nil, err
	}
	resp.CapnpStruct = &echoResponse
	return resp, nil
}

type EchoServiceServer interface {
	Echo(ctx context.Context, req *EchoRequest_) (*EchoResponse_, context.Context, error)
}

func RegisterEchoServiceServer(s *rpc.Server, srv EchoServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "EchoService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"Echo": {
				MethodName: "Echo",
				Handler:    _EchoService_Echo_Handler,
			},
		},
	}, srv)
}

func _EchoService_Echo_Handler(srv any, ctx context.Context, dec func(any) error) (any, context.Context, error) {
	in := new(EchoRequest_)
	if err := dec(&in.Msg); err != nil {
		return nil, ctx, err
	}
	echoRequest, err := ReadRootEchoRequest(in.Msg)
	if err != nil {
		return nil, ctx, err
	}
	in.CapnpStruct = &echoRequest
	resp, newCtx, err := srv.(EchoServiceServer).Echo(ctx, in)
	return resp.Msg, newCtx, err
}
