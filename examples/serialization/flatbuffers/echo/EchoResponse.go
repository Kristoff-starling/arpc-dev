// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package echo

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EchoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsEchoResponse(buf []byte, offset flatbuffers.UOffsetT) *EchoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EchoResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *EchoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EchoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EchoResponse) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EchoResponse) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *EchoResponse) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EchoResponse) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *EchoResponse) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EchoResponse) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EchoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EchoResponseAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func EchoResponseAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(1, score, 0)
}
func EchoResponseAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(username), 0)
}
func EchoResponseAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(content), 0)
}
func EchoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
